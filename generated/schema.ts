// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidityPositions(): Array<string> | null {
    let value = this.get("liquidityPositions");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidityPositions(value: Array<string> | null) {
    if (value === null) {
      this.unset("liquidityPositions");
    } else {
      this.set(
        "liquidityPositions",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }
}

export class LiquidityPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidityPosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityPosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityPosition", id.toString(), this);
  }

  static load(id: string): LiquidityPosition | null {
    return store.get("LiquidityPosition", id) as LiquidityPosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get poolAddress(): Bytes {
    let value = this.get("poolAddress");
    return value.toBytes();
  }

  set poolAddress(value: Bytes) {
    this.set("poolAddress", Value.fromBytes(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    return value.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }

  get poolProviderName(): string {
    let value = this.get("poolProviderName");
    return value.toString();
  }

  set poolProviderName(value: string) {
    this.set("poolProviderName", Value.fromString(value));
  }
}
